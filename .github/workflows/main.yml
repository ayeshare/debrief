# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
    tags: 
      - 'v*'
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env: 
  SPATIALITE_LIBRARY_PATH: mod_spatialite 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  install:
    name: Before installation
    runs-on: ubuntu-latest
    steps:
      - name: Update ubuntu
        run: |
                lsb_release -a
                sudo apt-get install -y libsqlite3-mod-spatialite
                sudo apt-get install libspatialite-dev
                sudo apt-get install libpq-dev python-dev
                sudo add-apt-repository -y ppa:ubuntugis/ppa
                sudo apt-get update
                sudo apt-get install -y postgis 
                sudo apt-get install postgresql
      - name: The actual installation
        run: | 
                    mvn --version
                    sudo apt-get install intltool
                    sudo apt-get install libgsf-1-dev
                    sudo apt-get install uuid-runtime
                    sudo apt-get install libglib2.0-dev
                    sudo apt-get install libxml2-dev
                    sudo apt-get install unzip
                    sudo apt-get install spatialite-bin
                    sudo apt-get install gcab
                    sudo apt-get install libgcab-1.0-0
                    sudo apt-get install libgcab-dev
                    sudo apt-get install libgconf-2-4
                    sudo apt-get install xvfb
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  build:
    name: Checkout and build
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout from repository 
        uses: actions/setup-java@v1
        with:
           java-version: 1.11
      - name: install java
        run: |
               sleep 3
               echo "root.win32.win32.x86_64 = win-64" >> org.mwc.debrief.combined.feature/build.properties
               # get a 64-bit windows JRE
               wget -P dest https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.5%2B10/OpenJDK11U-jre_x64_windows_hotspot_11.0.5_10.zip
               # unpack it
               cd dest
               unzip OpenJD*.zip
               # rename and move it
               mv *-jre jre
               mkdir ../org.mwc.debrief.combined.feature/win-64
               # move it to the target folder
               mv jre ../org.mwc.debrief.combined.feature/win-64/jre
               # move back to top level
               cd ../
               # additional step for ubuntu release 18.0.4 (bug reported on Valhalla/issues/1437)
      - name: run build with test 
        uses: GabrielBB/xvfb-action@v1
        with:
              working-directory: ./
              run: mvn clean verify -U -B -fae
      - name: publish test results 
        if: always()
        run: |
             ls org.mwc.debrief.test2/target
             cat org.mwc.debrief.test2/target/surefire-reports/TEST-org.mwc.debrief.test.AllTests.xml
      - name: build installer
        run: |
           ls /home/runner/work/debrief/debrief/org.mwc.debrief.product/target/products/
           ./install-msitools.sh
           ./contribs/msi/make_x64msi.sh
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Linux64bit  release 
        id: upload-linux-release-64bit
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.product/target/products/DebriefNG-Linux64Bit.zip
          asset_name: linux_release
          asset_content_type: application/zip
      - name: Upload MACOSX 64bit Release Asset
        id: upload-release-macosx-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.product/target/products/DebriefNG-MacOSX64Bit.zip
          asset_name: Debrief Mac OS 64Bit
          asset_content_type: application/zip
      - name: Upload Windows 32Bit Release Asset
        id: upload-release-windows32bit-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.product/target/products/DebriefNG-Windows32Bit.zip
          asset_name: Debrief Windows 32Bit
          asset_content_type: application/zip
      - name: Upload Windows 64Bit Release Asset
        id: upload-release-windows64bit-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.product/target/products/DebriefNG-Windows64Bit.zip
          asset_name: Debrief Windows 64Bit
          asset_content_type: application/zip
      - name: Upload P2Repository Release Asset
        id: upload-release-p2repo-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.product/target/products/P2_Repository.zip
          asset_name: P2 Update Repository
          asset_content_type: application/zip
      - name: Upload Debrief Legacy Release Asset
        id: upload-release-debrieflegacy-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.legacy/dist/DebriefLegacy*.jar
          asset_name: Debrief Legacy
          asset_content_type: application/zip
      - name: Upload Debrief Lite Release Asset
        id: upload-release-debrieflite-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/debrief/debrief/org.mwc.debrief.lite/dist/debrief-lite*.zip
          asset_name: Debrief Lite 
          asset_content_type: application/zip
      - name: Cleanup xvfb pidx
        uses: bcomnes/cleanup-xvfb@v1
